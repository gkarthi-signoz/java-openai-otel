/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import com.openai.client.OpenAIClient;
import com.openai.client.okhttp.OpenAIOkHttpClient;
import com.openai.models.ChatModel;
import com.openai.models.responses.Response;
import com.openai.models.responses.ResponseCreateParams;
import com.openai.models.ChatModel;
import com.openai.models.chat.completions.ChatCompletion;
import com.openai.models.chat.completions.ChatCompletionCreateParams;


import io.github.cdimascio.dotenv.Dotenv;

import io.opentelemetry.api.OpenTelemetry;
import io.opentelemetry.api.GlobalOpenTelemetry;
import io.opentelemetry.instrumentation.openai.v1_1.OpenAITelemetry;
import io.opentelemetry.sdk.OpenTelemetrySdk;
import io.opentelemetry.sdk.resources.Resource;
import io.opentelemetry.semconv.ServiceAttributes;
import io.opentelemetry.sdk.trace.SdkTracerProvider;
import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;
import io.opentelemetry.exporter.otlp.http.trace.OtlpHttpSpanExporter;

import io.opentelemetry.exporter.logging.LoggingSpanExporter;

import io.opentelemetry.api.trace.Span;
import io.opentelemetry.api.trace.Tracer;


public class App {
    public static void main(String[] args) {
        // Configures using the `OPENAI_API_KEY`, `OPENAI_ORG_ID` and `OPENAI_PROJECT_ID` environment variables
        Dotenv dotenv = Dotenv.load();


        String serviceName = "openai-java"; // shows up as the service in SigNoz
        // String tracesEndpoint = "https://ingest.us.signoz.cloud:443/v1/traces"; // OTLP/HTTP traces path
        // String ingestionKey = dotenv.get("SIGNOZ_INGESTION_KEY");

        Resource resource = Resource.getDefault()
            .toBuilder()
            .put(ServiceAttributes.SERVICE_NAME, serviceName)
            .build();


        // // --- OTLP/HTTP exporter to SigNoz (with auth header) ---
        // OtlpHttpSpanExporter otlpExporter = OtlpHttpSpanExporter.builder()
        //         .setEndpoint(tracesEndpoint) // IMPORTANT: includes /v1/traces for HTTP
        //         .addHeader("signoz-ingestion-key", ingestionKey)
        //         .build();


        LoggingSpanExporter loggingExporter = LoggingSpanExporter.create();

        // --- TracerProvider
        SdkTracerProvider tracerProvider = SdkTracerProvider.builder()
                .setResource(resource)
                // .addSpanProcessor(BatchSpanProcessor.builder(otlpExporter).build())
                .addSpanProcessor(BatchSpanProcessor.builder(loggingExporter).build())
                .build();

        // --- OpenTelemetry SDK ---
        OpenTelemetrySdk sdk = OpenTelemetrySdk.builder()
                .setTracerProvider(tracerProvider)
                .build();

        OpenTelemetry openTelemetry = sdk;

        // // Set global OpenTelemetry instance for instrumentation
        // GlobalOpenTelemetry.set(openTelemetry);

        // // Manual sanity span
        // Tracer tracer = openTelemetry.getTracer("demo");
        // Span span = tracer.spanBuilder("otel-self-test").startSpan();
        // span.setAttribute("test", "ok");
        // span.end();


        // OpenAIClient client = OpenAIOkHttpClient.fromEnv();
        OpenAIClient client = OpenAIOkHttpClient.builder()
            .apiKey(dotenv.get("OPENAI_API_KEY"))
            .build();

         // Wrap it with OpenAITelemetry so calls are traced
        OpenAIClient otelClient = OpenAITelemetry.builder(openTelemetry)
                .build()
                .wrap(client);

        ResponseCreateParams params = ResponseCreateParams.builder()
            .input("What is SigNoz?")
            .model("gpt-4.1")
            .build();
        Response response = otelClient.responses().create(params);
        System.out.println(response);

        // ChatCompletionCreateParams params = ChatCompletionCreateParams.builder()
        //     .addUserMessage("What is SigNoz?")
        //     .model("gpt-4.1")
        //     .build();
        // ChatCompletion chatCompletion = otelClient.chat().completions().create(params);
        // System.out.println(chatCompletion);



        sdk.getSdkTracerProvider().forceFlush();
        sdk.getSdkTracerProvider().shutdown(); 
    }
}
